package foundation;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static java.nio.charset.StandardCharsets.UTF_8;

public class FileManipulation {

    public static void main(String[] args) {
        //  # 1
        try {
            System.out.println(mostProfitableYear("east"));
        } catch (FileNotFoundException e) {
            System.err.println(e.getMessage());
        }

        //  # 2
        try {
            System.out.println(topProducts("west", 2));
        } catch (FileNotFoundException e) {
            System.err.println(e.getMessage());
        }

        //  # 3
        try {
            System.out.println(monthlyRevenue("central", 2021));
        } catch (FileNotFoundException e) {
            System.err.println(e.getMessage());
        }
    }

    public static int mostProfitableYear(String regionName) throws FileNotFoundException {
        //This method takes the name of a sales region as an argument and returns the year in which the region generated
        // the highest revenue. If the user enters an invalid region name, your program should throw a FileNotFoundException
        // with a message saying "Cannot find sales data for {region name}, please try again."
        Path fileName = Paths.get(regionName + ".csv");
        if (!Files.exists(fileName)) {
            throw new FileNotFoundException("Cannot find sales data for " + regionName + ", please try again.");
        }
        List<String> fileLines = new ArrayList<>();
        try {
            fileLines = Files.readAllLines(fileName, UTF_8);
        } catch (IOException e) {
            System.err.println("Unable to read file");
        }

        Map<Integer, Integer> revenuePerYear = new HashMap<>();
        fileLines.remove(0);
        for (String line : fileLines) {
            String[] separatedValues = line.split(",");
            int year = Integer.parseInt(separatedValues[1]);
            int revenue = Integer.parseInt(separatedValues[4]);
            if (!revenuePerYear.containsKey(year)) {
                revenuePerYear.put(year, revenue);
            } else {
                revenuePerYear.replace(year, revenuePerYear.get(year) + revenue);
            }
        }

        List<Map.Entry<Integer, Integer>> sortedYears = new ArrayList<>(revenuePerYear.entrySet());
        sortedYears.sort(Map.Entry.comparingByValue());

        return sortedYears.get(sortedYears.size() - 1).getKey();
    }

    public static List<String> topProducts(String regionName, int n) throws FileNotFoundException {
        //This method takes the name of a sales region and an integer n as arguments, and returns the top n products
        // sold in the region by revenue. If there are less than n products sold in the region, the method should
        // return all products in the region.

        Path fileName = Paths.get(regionName + ".csv");
        if (!Files.exists(fileName)) {
            throw new FileNotFoundException("Cannot find sales data for " + regionName + ", please try again.");
        }

        List<String> fileLines = new ArrayList<>();
        try {
            fileLines = Files.readAllLines(fileName);
        } catch (IOException e) {
            System.err.println("Unable to read file");
        }
        fileLines.remove(0);
        Map<String, Integer> revenuePerProduct = new HashMap<>();
        for (String line : fileLines) {
            String[] separatedData = line.split(",");
            String product = separatedData[2];
            int revenue = Integer.parseInt(separatedData[4]);
            if (!revenuePerProduct.containsKey(product)) {
                revenuePerProduct.put(product, revenue);
            } else {
                revenuePerProduct.replace(product, revenuePerProduct.get(product) + revenue);
            }
        }
        List<Map.Entry<String, Integer>> sortedProducts = new ArrayList<>(revenuePerProduct.entrySet());
        sortedProducts.sort(Map.Entry.comparingByValue());
        List<String> bestProducts = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            bestProducts.add(sortedProducts.get(sortedProducts.size() - n + i).getKey());
        }
        return bestProducts;
    }

    public static Map<String, Integer> monthlyRevenue(String regionName, int year) throws FileNotFoundException {
        //This method takes the name of a sales region and a year as arguments, and returns a map of months
        // to revenue generated by the region in that year. If the user enters an invalid region name, your
        // program should throw a FileNotFoundException with a message saying
        // "Cannot find sales data for {region name}, please try again."

        Path fileName = Paths.get(regionName + ".csv");
        if (!Files.exists(fileName)) {
            throw new FileNotFoundException("Cannot find sales data for " + regionName + ", please try again.");
        }

        List<String> fileLines = new ArrayList<>();
        try {
            fileLines = Files.readAllLines(fileName, UTF_8);
        } catch (IOException e) {
            System.err.println("Unable to read file");
        }

        Map<String, Integer> monthRevenue = new HashMap<>();
        fileLines.remove(0);
        for (String line : fileLines) {
            String[] separatedData = line.split(",");

            String month = separatedData[0];
            int dataYear = Integer.parseInt(separatedData[1]);
            int revenue = Integer.parseInt(separatedData[4]);

            if (dataYear == year && !monthRevenue.containsKey(month)) {
                monthRevenue.put(month, revenue);
            } else if (dataYear == year) {
                monthRevenue.replace(month, monthRevenue.get(month) + revenue);
            }
        }
        return monthRevenue;
    }

}
